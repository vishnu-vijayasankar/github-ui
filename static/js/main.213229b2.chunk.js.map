{"version":3,"sources":["logo.svg","SideMenu/SideMenu.js","RepoList/RepoList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","SideMenu","props","state","profPic","profName","profId","profDesc","profCompany","profCountry","profBio","axios","get","then","res","setState","data","avatar_url","name","login","company","location","bio","className","src","this","alt","Component","KEYS_TO_FILTERS","RepoList","searchUpdated","term","searchTerm","repoArr","filteredRepo","filter","createFilter","onChange","placeholder","map","item","index","href","full_name","language","updated_at","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,qMCkD5BC,G,wDA7CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACTC,QAAQ,GACRC,SAAU,GACVC,OAAQ,GACRC,SAAU,GACVC,YAAa,GACbC,YAAa,GACbC,QAAS,IAVE,E,gEAcE,IAAD,OAChBC,IAAMC,IAAI,gDACTC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVX,QAASU,EAAIE,KAAKC,WAClBZ,SAAUS,EAAIE,KAAKE,KACnBZ,OAAQQ,EAAIE,KAAKG,MACjBX,YAAaM,EAAIE,KAAKI,QACtBX,YAAaK,EAAIE,KAAKK,SACtBX,QAASI,EAAIE,KAAKM,W,+BAM9B,OACI,yBAAKC,UAAU,gBACX,yBAAKC,IAAKC,KAAKtB,MAAMC,QAASsB,IAAI,YAClC,4BACI,6BAAMD,KAAKtB,MAAME,UACjB,yBAAKkB,UAAU,YAAYE,KAAKtB,MAAMG,SAG1C,6BAAMmB,KAAKtB,MAAMK,aACjB,6BAAMiB,KAAKtB,MAAMM,aACjB,6BAAMgB,KAAKtB,MAAMO,c,GAxCNiB,c,wBCCjBC,EAAkB,CAAC,QAsDVC,E,kDAnDX,WAAY3B,GAAQ,IAAD,8BACf,cAAMA,IAiBV4B,cAAgB,SAACC,GACb,EAAKhB,SAAS,CAACiB,WAAYD,KAhB3B,EAAK5B,MAAQ,CACT8B,QAAS,IAJE,E,gEAQE,IAAD,OAChBtB,IAAMC,IAAI,sDACTC,MAAK,SAAAC,GACF,EAAKC,SAAS,CACVkB,QAASnB,EAAIE,KACbgB,WAAY,U,+BAUxB,IAAME,EAAeT,KAAKtB,MAAM8B,QAAQE,OAAOC,uBAAaX,KAAKtB,MAAM6B,WAAYJ,IAEnF,OACI,yBAAKL,UAAU,YACX,kBAAC,IAAD,CAAaA,UAAU,eAAec,SAAUZ,KAAKK,cAAeQ,YAAY,yBAChF,4BAEQJ,EAAaK,KAAI,SAACC,EAAMC,GACpB,OACI,wBAAIlB,UAAU,YACV,wBAAIA,UAAU,YACV,uBAAGmB,KAAMF,EAAKG,WAAYH,EAAKtB,OAEnC,6BACI,0BAAMK,UAAU,eAAeiB,EAAKI,UACpC,0BAAMrB,UAAU,eAAhB,cAA0CiB,EAAKK,uB,GAvC5DlB,a,MCyBRmB,MA1Bf,WACE,OACE,yBAAKvB,UAAU,OAeb,yBAAKA,UAAU,YACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCbYwB,QACW,cAA7BC,OAAO3B,SAAS4B,UAEe,UAA7BD,OAAO3B,SAAS4B,UAEhBD,OAAO3B,SAAS4B,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7C,MAAK,SAAA8C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.213229b2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport './SideMenu.css';\r\n\r\nclass SideMenu extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            profPic:'',\r\n            profName: '',\r\n            profId: '',\r\n            profDesc: '',\r\n            profCompany: '',\r\n            profCountry: '',\r\n            profBio: ''\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://api.github.com/users/supreetsingh247')\r\n        .then(res => {\r\n            this.setState({\r\n                profPic: res.data.avatar_url,\r\n                profName: res.data.name,\r\n                profId: res.data.login,\r\n                profCompany: res.data.company,\r\n                profCountry: res.data.location,\r\n                profBio: res.data.bio\r\n            });\r\n        })\r\n    }\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"sideMenuWrap\">\r\n            <img src={this.state.profPic} alt=\"Profile\"/>\r\n            <h1>\r\n                <div>{this.state.profName}</div>\r\n                <div className=\"userName\">{this.state.profId}</div>\r\n            </h1>\r\n            \r\n            <div>{this.state.profCompany}</div>\r\n            <div>{this.state.profCountry}</div>\r\n            <div>{this.state.profBio}</div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SideMenu;","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport './RepoList.css';\r\nimport SearchInput, {createFilter} from 'react-search-input';\r\n\r\nconst KEYS_TO_FILTERS = ['name']\r\n\r\nclass RepoList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        \r\n        this.state = {\r\n            repoArr: []\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        axios.get('https://api.github.com/users/supreetsingh247/repos')\r\n        .then(res => {\r\n            this.setState({\r\n                repoArr: res.data,\r\n                searchTerm: ''\r\n            });\r\n        })\r\n    }\r\n\r\n    searchUpdated = (term) => {\r\n        this.setState({searchTerm: term})\r\n    }\r\n\r\n  render() {\r\n    const filteredRepo = this.state.repoArr.filter(createFilter(this.state.searchTerm, KEYS_TO_FILTERS))\r\n\r\n    return (\r\n        <div className=\"RepoList\">\r\n            <SearchInput className=\"search-input\" onChange={this.searchUpdated} placeholder=\"Find a repository...\"/>\r\n            <ul>\r\n                {\r\n                    filteredRepo.map((item, index) => {\r\n                        return (\r\n                            <li className=\"eachRepo\">\r\n                                <h3 className=\"repoName\">\r\n                                    <a href={item.full_name}>{item.name}</a>\r\n                                </h3>\r\n                                <div>\r\n                                    <span className=\"repoDetails\">{item.language}</span>\r\n                                    <span className=\"repoDetails\">Updated on {item.updated_at}</span>\r\n                                </div>\r\n                            </li>\r\n                        );\r\n                    })\r\n                }\r\n            </ul>\r\n        </div>\r\n        \r\n    );\r\n  }\r\n}\r\n\r\nexport default RepoList;","import React from 'react';\nimport logo from './logo.svg';\nimport SideMenu from './SideMenu/SideMenu.js';\nimport RepoList from './RepoList/RepoList.js'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header> */}\n      <div className=\"mainWrap\">\n        <SideMenu />\n        <RepoList />\n      </div>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}